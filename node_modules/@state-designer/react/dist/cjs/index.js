var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/index.ts
__export(exports, {
  S: () => import_core3.S,
  StateGraph: () => StateGraph,
  createDesign: () => import_core3.createDesign,
  createSelectorHook: () => createSelectorHook,
  createState: () => import_core3.createState,
  useGlobalState: () => useGlobalState,
  useLocalState: () => useLocalState,
  useSelector: () => useSelector,
  useStateDesigner: () => useStateDesigner
});

// src/useLocalState.tsx
var React = __toModule(require("react"));
var import_core = __toModule(require("@state-designer/core"));
function useLocalState(design, dependencies = []) {
  const rFirstMount = React.useRef(true);
  const [current, setCurrent] = React.useState(() => (0, import_core.createState)(design));
  React.useEffect(() => {
    function handleUpdate(update) {
      setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
        index: update.index,
        data: update.data,
        active: update.active,
        stateTree: update.stateTree,
        values: update.values,
        log: update.log
      }));
    }
    if (!rFirstMount.current) {
      const next = (0, import_core.createState)(design);
      setCurrent(next);
      return next.onUpdate(handleUpdate);
    }
    rFirstMount.current = false;
    return current.onUpdate(handleUpdate);
  }, [...dependencies]);
  return current;
}

// src/useGlobalState.tsx
var React2 = __toModule(require("react"));
function useGlobalState(design) {
  const [current, setCurrent] = React2.useState(() => design);
  React2.useEffect(() => {
    setCurrent(design);
    return design.onUpdate((update) => setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
      index: update.index,
      data: update.data,
      active: update.active,
      stateTree: update.stateTree,
      values: update.values,
      log: update.log
    })));
  }, [design]);
  return current;
}

// src/useStateDesigner.tsx
var import_core2 = __toModule(require("@state-designer/core"));
var React3 = __toModule(require("react"));
var emptyArray = [];
function useStateDesigner(design, dependencies = emptyArray) {
  const rFirstMount = React3.useRef(true);
  const [current, setCurrent] = React3.useState(() => "active" in design ? design : (0, import_core2.createState)(design));
  React3.useEffect(() => {
    if (!("active" in design))
      return;
    setCurrent(design);
    return design.onUpdate((update) => setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
      index: update.index,
      data: update.data,
      active: update.active,
      stateTree: update.stateTree,
      values: update.values,
      log: update.log
    })));
  }, [design]);
  React3.useEffect(() => {
    if ("active" in design)
      return;
    function handleUpdate(update) {
      setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
        index: update.index,
        data: update.data,
        active: update.active,
        stateTree: update.stateTree,
        values: update.values,
        log: update.log
      }));
    }
    if (!rFirstMount.current) {
      const next = (0, import_core2.createState)(design);
      setCurrent(next);
      return next.onUpdate(handleUpdate);
    }
    rFirstMount.current = false;
    return current.onUpdate(handleUpdate);
  }, [...dependencies]);
  return current;
}

// src/useSelector.tsx
var import_react = __toModule(require("react"));
function useSelector(state, selectFn, compareFn = (prev, next) => prev === next) {
  const [inner, dispatch] = (0, import_react.useReducer)((state2, update) => {
    const next = selectFn(update);
    return compareFn(state2.current, next) ? state2 : {
      count: state2.count + 1,
      current: next
    };
  }, state, (state2) => ({
    count: 0,
    current: selectFn(state2)
  }));
  (0, import_react.useEffect)(() => state.onUpdate((update) => dispatch(update)), [state, dispatch]);
  return inner.current;
}

// src/createSelectorHook.tsx
var import_react2 = __toModule(require("react"));
function createSelectorHook(state) {
  return function useSelector2(selectFn, compareFn = (prev, next) => prev === next) {
    const [inner, dispatch] = (0, import_react2.useReducer)((state2, update) => {
      const next = selectFn(update);
      return compareFn(state2.current, next) ? state2 : {
        count: state2.count + 1,
        current: next
      };
    }, state, (state2) => ({
      count: 0,
      current: selectFn(state2)
    }));
    (0, import_react2.useEffect)(() => state.onUpdate((update) => dispatch(update)), [dispatch]);
    return inner.current;
  };
}

// src/StateGraph.tsx
var React4 = __toModule(require("react"));
var EventList = ({ state }) => {
  function getEvents(state2) {
    const localEvents = [];
    if (state2.active) {
      localEvents.push(...Object.keys(state2.on));
    }
    for (const child of Object.values(state2.states)) {
      localEvents.push(...getEvents(child));
    }
    return localEvents;
  }
  const eventMap = new Map([]);
  for (const event of getEvents(state)) {
    const prior = eventMap.get(event);
    if (prior === void 0) {
      eventMap.set(event, 1);
    } else {
      eventMap.set(event, prior + 1);
    }
  }
  return /* @__PURE__ */ React4.createElement("ul", {
    className: "list event"
  }, Array.from(eventMap.entries()).map(([eventName, count], i) => /* @__PURE__ */ React4.createElement("li", {
    key: i,
    className: "item event"
  }, eventName, count > 1 && ` x${count}`)));
};
var StateNode = ({ state }) => {
  const { active } = state;
  const states = Object.values(state.states);
  return /* @__PURE__ */ React4.createElement("li", {
    "data-active": active,
    className: "item state"
  }, active ? /* @__PURE__ */ React4.createElement("b", null, state.name) : state.name, states.length > 0 && /* @__PURE__ */ React4.createElement("ul", {
    className: "list state"
  }, states.map((child, i) => /* @__PURE__ */ React4.createElement(StateNode, {
    key: i,
    state: child
  }))));
};
var StateGraph = (_a) => {
  var _b = _a, { state } = _b, rest = __objRest(_b, ["state"]);
  const { stateTree } = useStateDesigner(state, [state]);
  return /* @__PURE__ */ React4.createElement("div", __spreadValues({}, rest), /* @__PURE__ */ React4.createElement("span", {
    className: "title states"
  }, "States:"), /* @__PURE__ */ React4.createElement("ul", null, /* @__PURE__ */ React4.createElement(StateNode, {
    state: stateTree
  })), /* @__PURE__ */ React4.createElement("span", {
    className: "title events"
  }, "Events:"), /* @__PURE__ */ React4.createElement(EventList, {
    state: stateTree
  }));
};

// src/index.ts
var import_core3 = __toModule(require("@state-designer/core"));
//# sourceMappingURL=index.js.map
