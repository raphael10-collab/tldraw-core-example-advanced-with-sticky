{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/useLocalState.tsx", "../../src/useGlobalState.tsx", "../../src/useStateDesigner.tsx", "../../src/useSelector.tsx", "../../src/createSelectorHook.tsx", "../../src/StateGraph.tsx"],
  "sourcesContent": ["import useLocalState from './useLocalState'\nimport useGlobalState from './useGlobalState'\nimport useStateDesigner from './useStateDesigner'\nimport useSelector from './useSelector'\nimport createSelectorHook from './createSelectorHook'\nimport { StateGraph } from './StateGraph'\nimport { S, createDesign, createState } from '@state-designer/core'\n\nexport {\n  S,\n  createDesign,\n  createState,\n  useStateDesigner,\n  createSelectorHook,\n  useSelector,\n  StateGraph,\n  useLocalState,\n  useGlobalState,\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n// @refresh-reset\nimport * as React from 'react'\nimport { createState, S } from '@state-designer/core'\n\n/**\n * Create and subscribe to a new state.\n * @param design A designuration object for a new state.\n * @param dependencies (optional) An array of dependencies that, when changed, will rebuild a new state from the provided design.\n */\n\nexport default function useLocalState<\n  D,\n  R extends Record<string, S.Result<D>>,\n  C extends Record<string, S.Condition<D>>,\n  A extends Record<string, S.Action<D>>,\n  Y extends Record<string, S.Async<D>>,\n  T extends Record<string, S.Time<D>>,\n  V extends Record<string, S.Value<D>>\n>(design: S.Design<D, R, C, A, Y, T, V>, dependencies: any[] = []) {\n  const rFirstMount = React.useRef(true)\n\n  const [current, setCurrent] = React.useState(() => createState(design))\n\n  React.useEffect(() => {\n    function handleUpdate(update: typeof current) {\n      setCurrent((current) => ({\n        ...current,\n        index: update.index,\n        data: update.data,\n        active: update.active,\n        stateTree: update.stateTree,\n        values: update.values,\n        log: update.log,\n      }))\n    }\n\n    // Only create a new state if the `design` property is design object.\n    if (!rFirstMount.current) {\n      const next = createState(design)\n      setCurrent(next)\n      return next.onUpdate(handleUpdate)\n    }\n\n    rFirstMount.current = false\n    return current.onUpdate(handleUpdate)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [...dependencies])\n\n  return current\n}\n", "// @refresh-reset\nimport * as React from 'react'\nimport type { S } from '@state-designer/core'\n\n/**\n * Subscribe a component to a state created with createState.\n * @param design A state returned from createState.\n */\n\nexport default function useGlobalState<D, V extends Record<string, S.Value<D>>>(\n  design: S.DesignedState<D, V>\n) {\n  const [current, setCurrent] = React.useState(() => design)\n\n  React.useEffect(() => {\n    setCurrent(design)\n\n    return design.onUpdate((update) =>\n      setCurrent((current) => ({\n        ...current,\n        index: update.index,\n        data: update.data,\n        active: update.active,\n        stateTree: update.stateTree,\n        values: update.values,\n        log: update.log,\n      }))\n    )\n  }, [design])\n\n  return current\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { S, createState } from '@state-designer/core'\nimport * as React from 'react'\n\nconst emptyArray: unknown[] = []\n\n/* -------------------------------------------------- */\n/*                     React Hook                     */\n/* -------------------------------------------------- */\n\n/**\n * Subscribe a component to an existing state, or to a new one created from the provided designuration.\n * @param design A designuration object for a new state \u2014 or a state returned from createState.\n * @param dependencies (optional) An array of dependencies that, when changed, will rebuild a new state from the provided design.\n */\n\nexport function useStateDesigner<D, V extends Record<string, S.Value<D>>>(\n  design: S.DesignedState<D, V>\n): S.DesignedState<D, V>\n\nexport function useStateDesigner<\n  D,\n  R extends Record<string, S.Result<D>>,\n  C extends Record<string, S.Condition<D>>,\n  A extends Record<string, S.Action<D>>,\n  Y extends Record<string, S.Async<D>>,\n  T extends Record<string, S.Time<D>>,\n  V extends Record<string, S.Value<D>>\n>(design: S.Design<D, R, C, A, Y, T, V>): S.DesignedState<D, V>\n\nexport default function useStateDesigner<\n  D,\n  R extends Record<string, S.Result<D>>,\n  C extends Record<string, S.Condition<D>>,\n  A extends Record<string, S.Action<D>>,\n  Y extends Record<string, S.Async<D>>,\n  T extends Record<string, S.Time<D>>,\n  V extends Record<string, S.Value<D>>\n>(design: S.Design<D, R, C, A, Y, T, V> | S.DesignedState<D, V>, dependencies: any[] = emptyArray) {\n  const rFirstMount = React.useRef(true)\n\n  const [current, setCurrent] = React.useState<S.DesignedState<D, V>>(() =>\n    'active' in design ? design : createState(design)\n  )\n\n  // Global\n  React.useEffect(() => {\n    if (!('active' in design)) return\n\n    setCurrent(design)\n\n    return design.onUpdate((update) =>\n      setCurrent((current) => ({\n        ...current,\n        index: update.index,\n        data: update.data,\n        active: update.active,\n        stateTree: update.stateTree,\n        values: update.values,\n        log: update.log,\n      }))\n    )\n  }, [design])\n\n  // Local\n  React.useEffect(() => {\n    if ('active' in design) return\n\n    function handleUpdate(update: typeof current) {\n      setCurrent((current) => ({\n        ...current,\n        index: update.index,\n        data: update.data,\n        active: update.active,\n        stateTree: update.stateTree,\n        values: update.values,\n        log: update.log,\n      }))\n    }\n\n    // Only create a new state if the `design` property is design object.\n    if (!rFirstMount.current) {\n      const next = createState(design)\n      setCurrent(next)\n      return next.onUpdate(handleUpdate)\n    }\n\n    rFirstMount.current = false\n    return current.onUpdate(handleUpdate)\n  }, [...dependencies])\n\n  return current\n}\n", "import { useReducer, useEffect } from 'react'\nimport type { S } from '@state-designer/core'\n\ntype InnerState<T> = { count: number; current: T }\n\n/**\n * useSelector\n * @param state A state created with `createState`.\n * @param selectFn A function that returns information derived from a state update.\n * @param compareFn - (Optional) A function to test whether the new selection matches the old section.\n * @example const tables = useSelector(state, (update) => update.data.tables)\n */\nexport default function useSelector<State extends S.DesignedState, T>(\n  state: State,\n  selectFn: (update: State) => T,\n  compareFn: (prev: T, next: T) => boolean = (prev, next) => prev === next\n): T {\n  const [inner, dispatch] = useReducer(\n    (state: InnerState<T>, update: State): InnerState<T> => {\n      const next = selectFn(update)\n      return compareFn(state.current, next)\n        ? state\n        : {\n            count: state.count + 1,\n            current: next,\n          }\n    },\n    state,\n    (state) => ({\n      count: 0,\n      current: selectFn(state),\n    })\n  )\n\n  useEffect(() => state.onUpdate((update: State) => dispatch(update)), [state, dispatch])\n\n  return inner.current\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useReducer, useEffect } from 'react'\nimport type { S } from '@state-designer/core'\n\ntype InnerState<T> = { count: number; current: T }\n\n/**\n * createSelectorHook\n * @description A function that returns a useSelector hook for the\n * given state. The hook works just like `useSelector`, except that\n * you do not need to pass the hook a state as its first argument.\n * @param state A state created with `createState`.\n * @example const useSelector = createSelectorHook(roomState)\n *\n * // In a component\n * const tables = useSelector((state) => state.data.tables)\n */\n\nexport default function createSelectorHook<State extends S.DesignedState<any, any>>(state: State) {\n  return function useSelector<T>(\n    selectFn: (update: State) => T,\n    compareFn: (prev: T, next: T) => boolean = (prev, next) => prev === next\n  ) {\n    const [inner, dispatch] = useReducer(\n      (state: InnerState<T>, update: State): InnerState<T> => {\n        const next = selectFn(update)\n        return compareFn(state.current, next)\n          ? state\n          : {\n              count: state.count + 1,\n              current: next,\n            }\n      },\n      state,\n      (state) => ({\n        count: 0,\n        current: selectFn(state),\n      })\n    )\n\n    useEffect(() => state.onUpdate((update) => dispatch(update)), [dispatch])\n\n    return inner.current\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport * as React from 'react'\nimport type { S } from '@state-designer/core'\nimport useStateDesigner from './useStateDesigner'\n\nconst EventList: React.FC<{\n  state: S.State<any>\n}> = ({ state }) => {\n  function getEvents(state: S.State<any>): string[] {\n    const localEvents: string[] = []\n\n    if (state.active) {\n      localEvents.push(...Object.keys(state.on))\n    }\n\n    for (const child of Object.values(state.states)) {\n      localEvents.push(...getEvents(child))\n    }\n\n    return localEvents\n  }\n\n  const eventMap = new Map<string, number>([])\n\n  for (const event of getEvents(state)) {\n    const prior = eventMap.get(event)\n    if (prior === undefined) {\n      eventMap.set(event, 1)\n    } else {\n      eventMap.set(event, prior + 1)\n    }\n  }\n\n  return (\n    <ul className=\"list event\">\n      {Array.from(eventMap.entries()).map(([eventName, count], i) => (\n        <li key={i} className=\"item event\">\n          {eventName}\n          {count > 1 && ` x${count}`}\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nconst StateNode: React.FC<{\n  state: S.State<any>\n}> = ({ state }) => {\n  const { active } = state\n  const states = Object.values(state.states)\n  return (\n    <li data-active={active} className=\"item state\">\n      {active ? <b>{state.name}</b> : state.name}\n      {states.length > 0 && (\n        <ul className=\"list state\">\n          {states.map((child, i) => (\n            <StateNode key={i} state={child} />\n          ))}\n        </ul>\n      )}\n    </li>\n  )\n}\n\nexport const StateGraph: React.FC<\n  {\n    state: S.DesignedState<any, any>\n  } & React.HTMLProps<HTMLDivElement>\n> = ({ state, ...rest }) => {\n  const { stateTree } = useStateDesigner(state, [state])\n\n  return (\n    <div {...rest}>\n      <span className=\"title states\">States:</span>\n      <ul>\n        <StateNode state={stateTree} />\n      </ul>\n      <span className=\"title events\">Events:</span>\n      <EventList state={stateTree} />\n    </div>\n  )\n}\n"],
  "mappings": "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",
  "names": []
}
