var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/useLocalState.tsx
import {
  useEffect,
  useRef,
  useState
} from "react";
import { createState } from "@state-designer/core";
function useLocalState(design, dependencies = []) {
  const rFirstMount = useRef(true);
  const [current, setCurrent] = useState(() => createState(design));
  useEffect(() => {
    function handleUpdate(update) {
      setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
        index: update.index,
        data: update.data,
        active: update.active,
        stateTree: update.stateTree,
        values: update.values,
        log: update.log
      }));
    }
    if (!rFirstMount.current) {
      const next = createState(design);
      setCurrent(next);
      return next.onUpdate(handleUpdate);
    }
    rFirstMount.current = false;
    return current.onUpdate(handleUpdate);
  }, [...dependencies]);
  return current;
}

// src/useGlobalState.tsx
import {
  useEffect as useEffect2,
  useState as useState2
} from "react";
function useGlobalState(design) {
  const [current, setCurrent] = useState2(() => design);
  useEffect2(() => {
    setCurrent(design);
    return design.onUpdate((update) => setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
      index: update.index,
      data: update.data,
      active: update.active,
      stateTree: update.stateTree,
      values: update.values,
      log: update.log
    })));
  }, [design]);
  return current;
}

// src/useStateDesigner.tsx
import { createState as createState2 } from "@state-designer/core";
import {
  useEffect as useEffect3,
  useRef as useRef2,
  useState as useState3
} from "react";
var emptyArray = [];
function useStateDesigner(design, dependencies = emptyArray) {
  const rFirstMount = useRef2(true);
  const [current, setCurrent] = useState3(() => "active" in design ? design : createState2(design));
  useEffect3(() => {
    if (!("active" in design))
      return;
    setCurrent(design);
    return design.onUpdate((update) => setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
      index: update.index,
      data: update.data,
      active: update.active,
      stateTree: update.stateTree,
      values: update.values,
      log: update.log
    })));
  }, [design]);
  useEffect3(() => {
    if ("active" in design)
      return;
    function handleUpdate(update) {
      setCurrent((current2) => __spreadProps(__spreadValues({}, current2), {
        index: update.index,
        data: update.data,
        active: update.active,
        stateTree: update.stateTree,
        values: update.values,
        log: update.log
      }));
    }
    if (!rFirstMount.current) {
      const next = createState2(design);
      setCurrent(next);
      return next.onUpdate(handleUpdate);
    }
    rFirstMount.current = false;
    return current.onUpdate(handleUpdate);
  }, [...dependencies]);
  return current;
}

// src/useSelector.tsx
import { useReducer, useEffect as useEffect4 } from "react";
function useSelector(state, selectFn, compareFn = (prev, next) => prev === next) {
  const [inner, dispatch] = useReducer((state2, update) => {
    const next = selectFn(update);
    return compareFn(state2.current, next) ? state2 : {
      count: state2.count + 1,
      current: next
    };
  }, state, (state2) => ({
    count: 0,
    current: selectFn(state2)
  }));
  useEffect4(() => state.onUpdate((update) => dispatch(update)), [state, dispatch]);
  return inner.current;
}

// src/createSelectorHook.tsx
import { useReducer as useReducer2, useEffect as useEffect5 } from "react";
function createSelectorHook(state) {
  return function useSelector2(selectFn, compareFn = (prev, next) => prev === next) {
    const [inner, dispatch] = useReducer2((state2, update) => {
      const next = selectFn(update);
      return compareFn(state2.current, next) ? state2 : {
        count: state2.count + 1,
        current: next
      };
    }, state, (state2) => ({
      count: 0,
      current: selectFn(state2)
    }));
    useEffect5(() => state.onUpdate((update) => dispatch(update)), [dispatch]);
    return inner.current;
  };
}

// src/StateGraph.tsx
import {
  createElement
} from "react";
var EventList = ({ state }) => {
  function getEvents(state2) {
    const localEvents = [];
    if (state2.active) {
      localEvents.push(...Object.keys(state2.on));
    }
    for (const child of Object.values(state2.states)) {
      localEvents.push(...getEvents(child));
    }
    return localEvents;
  }
  const eventMap = new Map([]);
  for (const event of getEvents(state)) {
    const prior = eventMap.get(event);
    if (prior === void 0) {
      eventMap.set(event, 1);
    } else {
      eventMap.set(event, prior + 1);
    }
  }
  return /* @__PURE__ */ createElement("ul", {
    className: "list event"
  }, Array.from(eventMap.entries()).map(([eventName, count], i) => /* @__PURE__ */ createElement("li", {
    key: i,
    className: "item event"
  }, eventName, count > 1 && ` x${count}`)));
};
var StateNode = ({ state }) => {
  const { active } = state;
  const states = Object.values(state.states);
  return /* @__PURE__ */ createElement("li", {
    "data-active": active,
    className: "item state"
  }, active ? /* @__PURE__ */ createElement("b", null, state.name) : state.name, states.length > 0 && /* @__PURE__ */ createElement("ul", {
    className: "list state"
  }, states.map((child, i) => /* @__PURE__ */ createElement(StateNode, {
    key: i,
    state: child
  }))));
};
var StateGraph = (_a) => {
  var _b = _a, { state } = _b, rest = __objRest(_b, ["state"]);
  const { stateTree } = useStateDesigner(state, [state]);
  return /* @__PURE__ */ createElement("div", __spreadValues({}, rest), /* @__PURE__ */ createElement("span", {
    className: "title states"
  }, "States:"), /* @__PURE__ */ createElement("ul", null, /* @__PURE__ */ createElement(StateNode, {
    state: stateTree
  })), /* @__PURE__ */ createElement("span", {
    className: "title events"
  }, "Events:"), /* @__PURE__ */ createElement(EventList, {
    state: stateTree
  }));
};

// src/index.ts
import { S as S3, createDesign, createState as createState3 } from "@state-designer/core";
export {
  S3 as S,
  StateGraph,
  createDesign,
  createSelectorHook,
  createState3 as createState,
  useGlobalState,
  useLocalState,
  useSelector,
  useStateDesigner
};
//# sourceMappingURL=index.js.map
